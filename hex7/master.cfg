from buildbot.plugins import *
import datetime
import boto3


ssm_client = boto3.client('ssm', region_name='us-east-1')
google_api_key = ssm_client.get_parameter(Name='GOOGLE_API_KEY')['Parameter']['Value']
google_search_id = ssm_client.get_parameter(Name='GOOGLE_SEARCH_ID')['Parameter']['Value']
db_user = ssm_client.get_parameter(Name='BUILDBOT_DB_USER')['Parameter']['Value']
db_pass = ssm_client.get_parameter(Name='BUILDBOT_DB_PASS')['Parameter']['Value']
db_host = ssm_client.get_parameter(Name='BUILDBOT_DB_HOST')['Parameter']['Value']
worker_user = ssm_client.get_parameter(Name='BUILDBOT_WORKER_USER')['Parameter']['Value']
worker_pass = ssm_client.get_parameter(Name='BUILDBOT_WORKER_PASS')['Parameter']['Value']


c = BuildmasterConfig = {}
c['buildbotNetUsageData'] = None
c['workers'] = [worker.Worker(worker_user, worker_pass)]
c['protocols'] = {'pb': {'port': 9989}}
c['services'] = []
c['title'] = 'Hex7 CICD'
c['titleURL'] = 'https://hex7.com'
c['buildbotURL'] = 'http://hex7.com:8010/'
c['www'] = dict(port=8010, plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
c['db'] = { 'db_url' : "sqlite:///state.sqlite" }
#c['db'] = { 'db_url': 'mysql://' + db_user + ':' + db_pass + '@' + dbhost + '/buildbot?max_idle=300&storage_engine=innodb' }


c['change_source'] = []
c['change_source'].append(changes.GitPoller('https://github.com/nand0p/covid19.git',
                                            workdir='covid19-workdir',
                                            branch='master',
                                            pollInterval=300))
c['change_source'].append(changes.GitPoller('https://github.com/nand0p/hex7.git',
                                            workdir='hex7-workdir',
                                            branch='master',
                                            pollInterval=300))
c['change_source'].append(changes.GitPoller('https://github.com/nand0p/damnswank.git',
                                            workdir='damnswank-workdir',
                                            branch='master',
                                            pollInterval=300))
c['change_source'].append(changes.GitPoller('https://github.com/nand0p/reimage.git',
                                            workdir='reimage-workdir',
                                            branch='master',
                                            pollInterval=300))
c['change_source'].append(changes.GitPoller('https://github.com/nand0p/hubble.git',
                                            workdir='hubble-workdir',
                                            branch='master',
                                            pollInterval=300))
c['change_source'].append(changes.GitPoller('https://github.com/nand0p/reart.git',
                                            workdir='reart-workdir',
                                            branch='master',
                                            pollInterval=300))




c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(name='cicd-covid19',
                                                        change_filter=util.ChangeFilter(branch='master'),
                                                        treeStableTimer=None,
                                                        builderNames=['cicd-covid19']))
c['schedulers'].append(schedulers.ForceScheduler(name='force-covid19',
                                                 builderNames=['cicd-covid19']))
c['schedulers'].append(schedulers.Nightly(name='nightly-covid19',
                                          branch='master',
                                          builderNames=['cicd-covid19'],
                                          hour=3,
                                          minute=0))


c['schedulers'].append(schedulers.SingleBranchScheduler(name='cicd-hex7',
                                                        change_filter=util.ChangeFilter(branch='master'),
                                                        treeStableTimer=None,
                                                        builderNames=['cicd-hex7']))
c['schedulers'].append(schedulers.ForceScheduler(name='force-hex7',
                                                 builderNames=['cicd-hex7']))


c['schedulers'].append(schedulers.SingleBranchScheduler(name='cicd-damnswank',
                                                        change_filter=util.ChangeFilter(branch='master'),
                                                        treeStableTimer=None,
                                                        builderNames=['cicd-damnswank']))
c['schedulers'].append(schedulers.ForceScheduler(name='force-damnswank',
                                                 builderNames=['cicd-damnswank']))


c['schedulers'].append(schedulers.SingleBranchScheduler(name='cicd-reimage',
                                                        change_filter=util.ChangeFilter(branch='master'),
                                                        treeStableTimer=None,
                                                        builderNames=['cicd-reimage']))
c['schedulers'].append(schedulers.ForceScheduler(name='force-reimage',
                                                 builderNames=['cicd-reimage']))


c['schedulers'].append(schedulers.SingleBranchScheduler(name='cicd-hubble',
                                                        change_filter=util.ChangeFilter(branch='master'),
                                                        treeStableTimer=None,
                                                        builderNames=['cicd-hubble']))
c['schedulers'].append(schedulers.ForceScheduler(name='force-hubble',
                                                 builderNames=['cicd-hubble']))


c['schedulers'].append(schedulers.SingleBranchScheduler(name='cicd-reart',
                                                        change_filter=util.ChangeFilter(branch='master'),
                                                        treeStableTimer=None,
                                                        builderNames=['cicd-reart']))
c['schedulers'].append(schedulers.ForceScheduler(name='force-reart',
                                                 builderNames=['cicd-reart']))


c['builders'] = []
factory_covid19 = util.BuildFactory()
factory_covid19.addStep(steps.Git(repourl='https://github.com/nand0p/covid19.git', mode='incremental'))
factory_covid19.addStep(steps.ShellCommand(command=['docker', 'image', 'prune', '-f']))
factory_covid19.addStep(steps.ShellCommand(command=['docker', 'container', 'prune', '-f']))
factory_covid19.addStep(steps.ShellCommand(command=['echo', '--build-arg', 'DATE=' + str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))]))
factory_covid19.addStep(steps.ShellCommand(command=['echo', '--build-arg', util.Interpolate('REVISION=%(prop:got_revision)s')]))
factory_covid19.addStep(steps.ShellCommand(command=['docker', 'build',
                                                    '--file', 'Dockerfile',
                                                    '--tag', 'covid19-cicd',
                                                    '--no-cache',
                                                    '--build-arg', util.Interpolate('REVISION=%(prop:got_revision)s'),
                                                    '--build-arg', 'DATE=' + str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')),
                                                    '.']))
factory_covid19.addStep(steps.ShellCommand(command=['docker', 'kill', 'covid19-cicd'], warnOnFailure=True))
factory_covid19.addStep(steps.ShellCommand(command=['docker', 'run', '--rm', '-d', '--name', 'covid19-cicd', '-p', '8001:5000', 'covid19-cicd']))
c['builders'].append(util.BuilderConfig(name='cicd-covid19', workernames=[worker_user], factory=factory_covid19))


factory_hex7 = util.BuildFactory()
factory_hex7.addStep(steps.Git(repourl='https://github.com/nand0p/hex7.git', mode='incremental'))
factory_hex7.addStep(steps.ShellCommand(command=['docker', 'image', 'prune', '-f']))
factory_hex7.addStep(steps.ShellCommand(command=['docker', 'container', 'prune', '-f']))
factory_hex7.addStep(steps.ShellCommand(command=['ls', '-la']))
factory_hex7.addStep(steps.ShellCommand(command=['echo', '--build-arg', 'DATE=' + str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))]))
factory_hex7.addStep(steps.ShellCommand(command=['echo', '--build-arg', util.Interpolate('REVISION=%(prop:got_revision)s')]))
factory_hex7.addStep(steps.ShellCommand(command=['docker', 'build',
                                                 '--file', 'Dockerfile',
                                                 '--tag', 'hex7-cicd',
                                                 '--no-cache',
                                                 '--build-arg', util.Interpolate('REVISION=%(prop:got_revision)s'),
                                                 '--build-arg', 'DATE=' + str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')),
                                                 '.']))
factory_hex7.addStep(steps.ShellCommand(command=['docker', 'kill', 'hex7-cicd'], warnOnFailure=True))
factory_hex7.addStep(steps.ShellCommand(command=['docker', 'run', '--rm', '-d', '--name', 'hex7-cicd', '-p', '8000:8000', 'hex7-cicd']))
c['builders'].append(util.BuilderConfig(name='cicd-hex7', workernames=[worker_user], factory=factory_hex7))


factory_damnswank = util.BuildFactory()
factory_damnswank.addStep(steps.Git(repourl='https://github.com/nand0p/damnswank.git', mode='incremental'))
factory_damnswank.addStep(steps.ShellCommand(command=['docker', 'image', 'prune', '-f']))
factory_damnswank.addStep(steps.ShellCommand(command=['docker', 'container', 'prune', '-f']))
factory_damnswank.addStep(steps.ShellCommand(command=['ls', '-la']))
factory_damnswank.addStep(steps.ShellCommand(command=['echo', '--build-arg', 'DATE=' + str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))]))
factory_damnswank.addStep(steps.ShellCommand(command=['echo', '--build-arg', util.Interpolate('REVISION=%(prop:got_revision)s')]))
factory_damnswank.addStep(steps.ShellCommand(command=['docker', 'build',
                                                      '--file', 'Dockerfile',
                                                      '--tag', 'damnswank-cicd',
                                                      '--no-cache',
                                                      '--build-arg', util.Interpolate('REVISION=%(prop:got_revision)s'),
                                                      '--build-arg', 'DATE=' + str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')),
                                                      '.']))
factory_damnswank.addStep(steps.ShellCommand(command=['docker', 'kill', 'damnswank-cicd'], warnOnFailure=True))
factory_damnswank.addStep(steps.ShellCommand(command=['docker', 'run', '--rm', '-d', '--name', 'damnswank-cicd', '-p', '8002:8002', 'damnswank-cicd']))
c['builders'].append(util.BuilderConfig(name='cicd-damnswank', workernames=[worker_user], factory=factory_damnswank))


factory_reimage = util.BuildFactory()
factory_reimage.addStep(steps.Git(repourl='https://github.com/nand0p/reimage.git', mode='incremental'))
factory_reimage.addStep(steps.ShellCommand(command=['docker', 'image', 'prune', '-f']))
factory_reimage.addStep(steps.ShellCommand(command=['docker', 'container', 'prune', '-f']))
factory_reimage.addStep(steps.ShellCommand(command=['ls', '-la']))
factory_reimage.addStep(steps.ShellCommand(command=['echo', '--build-arg', 'DATE=' + str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))]))
factory_reimage.addStep(steps.ShellCommand(command=['echo', '--build-arg', util.Interpolate('REVISION=%(prop:got_revision)s')]))
factory_reimage.addStep(steps.ShellCommand(command=['echo', '--build-arg', 'GOOGLE_API_KEY=' + google_api_key]))
factory_reimage.addStep(steps.ShellCommand(command=['echo', '--build-arg', 'GOOGLE_SEARCH_ID=' + google_search_id]))
factory_reimage.addStep(steps.ShellCommand(command=['docker', 'build',
                                                    '--file', 'Dockerfile',
                                                    '--tag', 'reimage-cicd',
                                                    '--no-cache',
                                                    '--build-arg', util.Interpolate('REVISION=%(prop:got_revision)s'),
                                                    '--build-arg', 'DATE=' + str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')),
                                                    '--build-arg', 'GOOGLE_API_KEY=' + google_api_key,
                                                    '--build-arg', 'GOOGLE_SEARCH_ID=' + google_search_id,
                                                    '.']))
factory_reimage.addStep(steps.ShellCommand(command=['docker', 'kill', 'reimage-cicd'], warnOnFailure=True))
factory_reimage.addStep(steps.ShellCommand(command=['docker', 'run', '--rm', '-d', '--name', 'reimage-cicd', '-p', '8003:5000', 'reimage-cicd']))
c['builders'].append(util.BuilderConfig(name='cicd-reimage', workernames=[worker_user], factory=factory_reimage))


factory_hubble = util.BuildFactory()
factory_hubble.addStep(steps.Git(repourl='https://github.com/nand0p/hubble.git', mode='incremental'))
factory_hubble.addStep(steps.ShellCommand(command=['docker', 'image', 'prune', '-f']))
factory_hubble.addStep(steps.ShellCommand(command=['docker', 'container', 'prune', '-f']))
factory_hubble.addStep(steps.ShellCommand(command=['ls', '-la']))
factory_hubble.addStep(steps.ShellCommand(command=['echo', '--build-arg', 'DATE=' + str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))]))
factory_hubble.addStep(steps.ShellCommand(command=['echo', '--build-arg', util.Interpolate('REVISION=%(prop:got_revision)s')]))
factory_hubble.addStep(steps.ShellCommand(command=['docker', 'build',
                                                   '--file', 'Dockerfile',
                                                   '--tag', 'hubble-cicd',
                                                   '--no-cache',
                                                   '--build-arg', util.Interpolate('REVISION=%(prop:got_revision)s'),
                                                   '--build-arg', 'DATE=' + str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')),
                                                   '.']))
factory_hubble.addStep(steps.ShellCommand(command=['docker', 'kill', 'hubble-cicd'], warnOnFailure=True))
factory_hubble.addStep(steps.ShellCommand(command=['docker', 'run', '--rm', '-d', '--name', 'hubble-cicd', '-p', '8004:5000', 'hubble-cicd']))
c['builders'].append(util.BuilderConfig(name='cicd-hubble', workernames=[worker_user], factory=factory_hubble))


factory_reart = util.BuildFactory()
factory_reart.addStep(steps.Git(repourl='https://github.com/nand0p/reart.git', mode='incremental'))
factory_reart.addStep(steps.ShellCommand(command=['docker', 'image', 'prune', '-f']))
factory_reart.addStep(steps.ShellCommand(command=['docker', 'container', 'prune', '-f']))
factory_reart.addStep(steps.ShellCommand(command=['ls', '-la']))
factory_reart.addStep(steps.ShellCommand(command=['echo', '--build-arg', 'DATE=' + str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))]))
factory_reart.addStep(steps.ShellCommand(command=['echo', '--build-arg', util.Interpolate('REVISION=%(prop:got_revision)s')]))
factory_reart.addStep(steps.ShellCommand(command=['docker', 'build',
                                                   '--file', 'Dockerfile',
                                                   '--tag', 'reart-cicd',
                                                   '--no-cache',
                                                   '--build-arg', util.Interpolate('REVISION=%(prop:got_revision)s'),
                                                   '--build-arg', 'DATE=' + str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')),
                                                   '.']))
factory_reart.addStep(steps.ShellCommand(command=['docker', 'kill', 'reart-cicd'], warnOnFailure=True))
factory_reart.addStep(steps.ShellCommand(command=['docker', 'run', '--rm', '-d', '--name', 'reart-cicd', '-p', '8006:5000', 'reart-cicd']))
c['builders'].append(util.BuilderConfig(name='cicd-reart', workernames=[worker_user], factory=factory_reart))
